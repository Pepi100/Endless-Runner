#include <LiquidCrystal.h>
#include <LedControl.h>
#include <EEPROM.h>

#define RESET 1

//define matrix dimentions
#define M_HEIGHT 8
#define M_LENGTH 8
#define O_BLINK_RATE 75
#define P_BLINK_RATE 100
#define MIN_TRESH 200
#define MAX_TRESH 600
#define ASC_TIME 700
#define P_JUMP_TIME 150
#define DEBOUNCE_DELAY 25
#define MOVE_TIME 500
#define BUZZ_PIN 9

#define strafeTime 100
#define scrollTime 500

//define LCD variables

#define RS 10
#define EN 8
#define D4 7
#define D5 6
#define D6 4
#define D7 3
#define LCD_Backlight 5
#define LCD_WIDTH 16


// Pin definitions for the LED matrix
#define dinPin 12
#define clockPin 13
#define loadPin 11


// Pin definitions for the joystick
#define xPin A0
#define yPin A1
#define clickPin A2
#define contrastPin A3

LiquidCrystal lcd(RS, EN, D4, D5, D6, D7);


byte M_BRIGHT = 15; //0 ->15
byte LCD_BRIGHT = 1;
byte sounds = 1;

unsigned int playerScore = 0;

struct hs{
  char name[3];
  unsigned int score;
}highscore[3];
char currentName[3];

void updateHighscore(){


  if(highscore[0].score < playerScore){
    highscore[2] = highscore[1];
    highscore[1] = highscore[0];
    highscore[0].score = playerScore;
    Serial.println(highscore[0].score);
    highscore[0].name[0] = currentName[0];
    highscore[0].name[1] = currentName[1];
    highscore[0].name[2] = currentName[2];
  }else{
    if(highscore[1].score < playerScore){
      highscore[2] = highscore[1];
      highscore[1].score = playerScore;
      highscore[1].name[0] = currentName[0];
      highscore[1].name[1] = currentName[1];
      highscore[1].name[2] = currentName[2];
    }else{
      if(highscore[2].score < playerScore){
      highscore[2].score = playerScore;
      highscore[2].name[0] = currentName[0];
      highscore[2].name[1] = currentName[1];
      highscore[2].name[2] = currentName[2];
      }
    } 
  }
  highscore[0].name[3] = '\0';
  highscore[1].name[3] = '\0';
  highscore[2].name[3] = '\0';

  updateEEPROM();
}



byte playerX, playerY;
int lastValUp, lastValDown;
// Thresholds for joystick movement detection
const int minThreshold = 200;
const int maxThreshold = 600;



bool update = false;
bool matrixUpdate = false;


// Create an LedControl object to interface with the LED matrix
LedControl lc = LedControl(dinPin, clockPin, loadPin, 1); // DIN, CLK, LOAD, number of devices





unsigned int speed = 400;
unsigned long lastTravel;
unsigned long lastObsBlink;

bool matrixChanged = true;

byte matrix[M_HEIGHT][2 * M_LENGTH] = { };
byte matrixPos = 0;

const int obsNumber = 7;
const int obsSize = 3;
byte obstacles[obsNumber][obsSize][obsSize] = {
  {
    //no obstacle
    {0,0,0},
    {0,0,0},
    {0,0,0}
  },
  {
    
    {0,0,0},
    {0,0,0},
    {0,1,0}
  },
  {
    
    {0,0,0},
    {0,1,0},
    {0,1,0}
  },
  {
    
    {0,0,0},
    {0,0,0},
    {0,1,1}
  },
  {
    {0,0,0},
    {0,1,1},
    {0,1,1}
  },
  {
    {1,1,1},
    {0,0,0},
    {0,0,0}
  },
  {
    {0,0,0},
    {0,1,1},
    {0,0,0}
  }

};


const byte menuOptions = 6;
const String mainMenuOptions[menuOptions]{
  "Start Game",
  "Settings",
  "About",
  "How to Play",
  "Leaderboard",
  "Difficulty"
};
const byte aboutLines = 4;
const String aboutLinesArray[aboutLines]{
  "Endless Runner",
  "A game by:",
  "Radu Nedelcu",
  "https://github.com/Pepi100"
};

const byte howToPlayLines = 4;
const String howToPlayArray[howToPlayLines]{
  "Run and jump",
  "over obstacles",
  "to get the",
  "highest score"
};

// const byte howToPlayLines = 18;
// const String howToPlayArray[howToPlayLines]{
//   "Welcome to",
//   "Endless Runner",
//   "In this game the",
//   "character runs",
//   "automatically,",
//   "use the joystick",
//   "to make it jump",
//   "and crouch over",
//   "obstacles. The",
//   "game speeds up",
//   "gradually, ",
//   "challenging ",
//   "your reflexes, ",
//   "and your score", 
//   "is determined ",
//   "by the distance", 
//   "you cover.",
//   "Click to exit."
// };

const byte settingsLines = 6;
const String settingsOptionsArray[settingsLines]{
  "Set name",
  "LED brightness",
  "LCD brightness",
  "Sounds",
  "HighScore",
  "Back"
};


bool settingsMatrix[M_HEIGHT][M_LENGTH]{
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,1,1,1,0},
  {0,0,0,1,0,0,1,0},
  {0,0,0,1,0,0,1,0},
  {0,0,0,1,1,1,0,0},
  {0,0,1,0,0,0,0,0},
  {0,1,0,0,0,0,0,0},
  {1,0,0,0,0,0,0,0}
};

bool howToMatrix[M_HEIGHT][M_LENGTH]{
  {0,0,0,0,0,0,0,0},
  {0,0,0,1,1,0,0,0},
  {0,0,1,0,0,1,0,0},
  {0,0,0,0,0,1,0,0},
  {0,0,0,0,1,0,0,0},
  {0,0,0,0,1,0,0,0},
  {0,0,0,0,0,0,0,0},
  {0,0,0,0,1,0,0,0}
};

bool menuMatrix[M_HEIGHT][M_LENGTH]{
  {0,0,0,0,0,0,0,0},
  {0,0,0,1,1,0,0,0},
  {0,0,1,0,0,1,0,0},
  {0,1,0,1,1,0,1,0},
  {0,1,0,1,1,0,1,0},
  {0,0,1,0,0,1,0,0},
  {0,0,0,1,1,0,0,0},
  {0,0,0,0,0,0,0,0}
};

bool dumbellMatrix[M_HEIGHT][M_LENGTH]{
  {0,0,0,0,0,0,0,0},
  {0,0,1,0,0,1,0,0},
  {0,1,1,0,0,1,1,0},
  {1,1,1,1,1,1,1,1},
  {1,1,1,1,1,1,1,1},
  {0,1,1,0,0,1,1,0},
  {0,0,1,0,0,1,0,0},
  {0,0,0,0,0,0,0,0}
};

const bool cupMatrix[M_HEIGHT][M_LENGTH]{
  {0,0,0,0,0,0,0,0},
  {0,1,0,0,0,0,1,0},
  {0,1,1,0,0,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,0,1,1,1,1,0,0},
  {0,0,0,1,1,0,0,0},
  {0,0,0,1,1,0,0,0},
  {0,0,1,1,1,1,0,0}
};

const bool nameMatrix[M_HEIGHT][M_LENGTH]{
  {0,0,0,0,0,0,0,0},
  {0,0,1,1,1,1,0,0},
  {0,1,1,1,1,1,1,0},
  {0,1,1,1,1,1,1,0},
  {0,0,1,1,1,1,0,0},
  {0,0,0,1,1,0,0,0},
  {0,0,1,1,1,1,0,0},
  {0,0,1,1,1,1,0,0}
};


// bool LCDMatrix[M_HEIGHT][M_LENGTH]{
//   {0,1,0,0,0,0,0,0},
//   {0,1,0,0,0,0,0,0},
//   {0,1,1,0,0,1,0,0},
//   {0,0,0,0,1,0,0,0},
//   {0,0,0,0,1,0,0,0},
//   {0,1,1,0,0,1,0,0},
//   {0,1,0,1,0,0,0,0},
//   {0,1,1,0,0,0,0,0}
// };

//game variables
unsigned short difficulty = 10;
bool playerState = 1;
bool isJumping = 0;
bool isCrouching = 0;
bool isAscending = 0;
unsigned long ascendingTime;
unsigned long lastJumpTime;
unsigned long lastPlayerBlink;



unsigned int state;
//states:
/*
0 = click to enter menu
1 = main menu
2 = start game
3 = settings
4 = about

*/



//button debounce variables
short buttonReading;
short lastButtonState;
unsigned long lastDebounceTime;
short buttonState;
short buttonPressed; // this will store the result of the debounce process

void buttonDebounce(){
  buttonReading = digitalRead(clickPin);
  if (buttonReading != lastButtonState) {
    // reset the debouncing timer
    lastDebounceTime = millis();
  }
  if ((millis() - lastDebounceTime) > DEBOUNCE_DELAY) {
  // whatever the reading is at, it's been there for longer than the debounce
  // delay, so take it as the actual current state:

  // if the button state has changed:
    if (buttonReading != buttonState) {
      buttonState = buttonReading;
      // only toggle the LED if the new button state is LOW
      if (buttonState == LOW) {
        //set state
        buttonPressed = 1;
        //if it pased debounce, we start verification for HOLD
      }
    }
  }



  // save the reading. Next time through the loop, it'll be the lastButtonState:
  lastButtonState = buttonReading;
}

int xValue;
int yValue;
unsigned long lastStrafeTime = 0;
void readJoystick(){
  xValue = analogRead(xPin);
  yValue = analogRead(yPin);

  if(xValue < MIN_TRESH){
    xValue = 1;
  }else{
    if(xValue > MAX_TRESH){
      xValue = -1;
    }else{
      xValue = 0;
    }
  }

  if(yValue < MIN_TRESH){
    yValue = 1;
  }else{
    if(yValue > MAX_TRESH){
      yValue = -1;
    }else{
      yValue = 0;
    }
  }
}

void playerMovement(){
  // Serial.println(yValue)

  if(isJumping){
    if(isAscending){
      if(yValue != 1 || ascendingTime + ASC_TIME <= millis()){
        isAscending = 0;
      }else{
        if(yValue == 1 && lastJumpTime + P_JUMP_TIME <= millis()){
          movePlayer(0,-1);
          lastJumpTime = millis();
        }
      }
      
    }else{
      //is falling
      if(playerY < 5){
        if(lastJumpTime + P_JUMP_TIME <= millis()){
          movePlayer(0,1);
          lastJumpTime = millis();
        }
      }else{
        isJumping = 0;
      }


    }
  }else{
    if(yValue == 1){
      isJumping = 1;
      isAscending = 1;
      ascendingTime = millis();
      lastJumpTime = ascendingTime;
      movePlayer(0,-1);
    }
  }

  if(xValue && millis() >= lastStrafeTime + strafeTime){
    movePlayer(xValue, 0);
    lastStrafeTime = millis();
  }

  if(yValue == -1){
    isCrouching = 1;
  }else{
    isCrouching = 0;
  }



  // Serial.println(buttonPressed);

  // if(xValue != lastValueX && xValue != 0){
  //   joystickMoved = 1;
  // }
  // if(yValue != lastValueY && yValue != 0){
  //   joystickMoved = 1;
  // }


}

void movePlayer(int x, int y){

  //restore current position
  
  // update player coordonates
  playerX = max(matrixPos, min(matrixPos + M_LENGTH - 1, playerX + x));
  playerY = max(1, playerY + y);
  matrixChanged = true;
  drawPlayer();

}


void drawPlayer(){
  // if(lastPlayerBlink + P_BLINK_RATE <= millis()){
  //   playerState = !playerState;
  //   lastPlayerBlink = millis();
  // }

  //store current values
  if(isCrouching == 0)
    lc.setLed(0, playerY, playerX - matrixPos, playerState);
  lc.setLed(0, playerY + 1, playerX - matrixPos, playerState);
}

void generateMatrix(){
  
  //add ground
  for(int i = M_LENGTH; i <M_LENGTH * 2; i++){
    matrix[M_HEIGHT - 1][i] = 1;
  }


  // matrix[4][index + 4] = 1 ;
  // generate random obstacle
  int obs = random(obsNumber);
  int obsPosition = M_LENGTH + random(M_LENGTH - obsSize * 2);

  for(int row = 0; row <  obsSize; row++){
    for(int col = 0; col < obsSize; col++){
      matrix[4 + row][M_LENGTH + col] = obstacles[obs][row][col];
    }
  }


}

void copyForward(){
  for (int row = 0; row < M_HEIGHT; row++){
    for (int col = 0; col < M_LENGTH; col++){
      matrix[row][col] = matrix[row][col + M_LENGTH];
    }
  }
}

void printMatrix(){
  Serial.print("\n\n\n\n\n\n\n\n\n");

   for (int row = 0; row < M_HEIGHT; row++) {
    for (int col = 0; col < M_LENGTH * 2; col++) {
     Serial.print(matrix[row][col]);
     Serial.print(" "); 
    }
    Serial.print('\n');
   }

}

// Function to update the LED matrix display
void updateMatrix() {
  for (int row = 0; row < M_HEIGHT; row++) {
    for (int col = matrixPos; col < M_LENGTH + matrixPos; col++) {
      //only odd values should be diplayed
      lc.setLed(0,row,col - matrixPos, matrix[row][col] % 2); // Update each LED state
    }
  }
}

void advanceGame(){
  if(millis() >= lastTravel + speed){
    matrixPos ++;
    movePlayer(1,0); //one position to the right
    matrixChanged = true;

    if(matrixPos == M_LENGTH){
      //copy the second part onto the first
      copyForward();
      matrixPos = 0;
      movePlayer(-1* M_LENGTH, 0);
      generateMatrix();
      playerScore++;
      update = true;;
    }
    
    
    lastTravel = millis();
  }
}

void blinkObstacles(){
  if(millis() > lastObsBlink + O_BLINK_RATE){
    //switch 2 to 3 and vice versa
    for (int row = 0; row < M_HEIGHT - 1; row++) {
      for (int col = 0; col < M_LENGTH * 2; col++) {
        if(matrix[row][col] == 2 || matrix[row][col] == 3)
          matrix[row][col] = 2 + (matrix[row][col] + 1) % 2;
      }
    }

    lastObsBlink = millis();
    matrixChanged = true;
  }

}

bool gameOn = 0;
bool endGame = 0;

void gameBegin(){

  playerScore = 0;
  endGame = 0;
  gameOn = 0;

  randomSeed(analogRead(5)); // generate a seed based on random reading from an unconnected pin => https://www.arduino.cc/reference/en/language/functions/random-numbers/random/

  //initialize ground

  for(int i = 0; i <M_LENGTH ; i++){
    matrix[M_HEIGHT - 1][i] = 1;
  }


  generateMatrix();

  playerX = 1;
  playerY = 5;
  drawPlayer();

  

  // printMatrix();

  lastTravel = millis();

}




void isAlive(){

  if(isCrouching == 0)
    if(matrix[playerY][playerX])
    endGame = 1;
  
  if(matrix[playerY + 1][playerX])
    endGame = 1;

  if(endGame == 1)
    update = 1;
}


void gameLogic(){

  // printMatrix();
  playerMovement();

  advanceGame();
  

  // blinkObstacles();

  // Update the LED matrix display if there's been a change
  if (matrixChanged) {
    updateMatrix();
    matrixChanged = false;
  }

  drawPlayer();
  //check for continuation
  isAlive();


  speed = max(150, 400 - playerScore * difficulty);

}

//custom character declarations

const byte previousChar = 0;
const byte previous[8] = {
  B00011,
  B00111,
  B01110,
  B11100,
  B01110,
  B00111,
  B00011,
};
const byte nextChar = 1;
const byte next[8] = {
  B11000,
  B11100,
  B01110,
  B00111,
  B01110,
  B11100,
  B11000,
};

const byte heartChar = 4;
const byte heart[8] = {
	B00000,
	B01010,
	B11111,
	B11111,
	B01110,
	B00100,
	B00000,
	B00000
};
const byte selectedChar = 5;
const byte selected[8] = {
  B11000,
  B11100,
  B10110,
  B10011,
  B10011,
  B10110,
  B11100,
  B11000
};
const byte rectangleChar = 6;
const byte rectangle[8] = {
  B00000,
  B00000,
  B11111,
  B11111,
  B11111,
  B11111,
  B11111,
  B00000
};
const byte lineChar = 7;
const byte line[8] = {
  B00000,
  B00000,
  B00000,
  B00000,
  B11111,
  B00000,
  B00000,
  B00000
};

void initLCD(){

  lcd.begin(16, 2);
  analogWrite(LCD_Backlight,map(LCD_BRIGHT,0,15,0,255));
  lcd.createChar(0, previous);
  lcd.createChar(1, next);
  lcd.createChar(4, heart);
  lcd.createChar(selectedChar, selected);
  lcd.createChar(rectangleChar, rectangle);
  lcd.createChar(lineChar, line);


  
  delay(500);
  if(sounds){
    tone(BUZZ_PIN, 400, 500);
  }

  lcd.setCursor( 3, 0);
  lcd.print("Welcome to");

  delay(500);
  if(sounds){
    tone(BUZZ_PIN, 600, 500);
  }
  lcd.setCursor(1, 1);
  lcd.print("Endless Runner");


  delay(1000);

}

void readEEPROM(){
  EEPROM.get(0, M_BRIGHT); //takes up 2 bytes
  EEPROM.get(2, LCD_BRIGHT); //takes up 2 bytes
  EEPROM.get(4, sounds); //takes up 2 bytes
  EEPROM.get(6, highscore[0].score); //takes up 2 bytes
  EEPROM.get(8, highscore[1].score); //takes up 2 bytes
  EEPROM.get(10, highscore[2].score); //takes up 2 bytes

  for(int i = 0; i <= 2; i++){
    EEPROM.get(12 + i, highscore[0].name[i]);
    EEPROM.get(15 + i, highscore[1].name[i]);
    EEPROM.get(18 + i, highscore[2].name[i]);
    EEPROM.get(21 + i, currentName[i]);
  }
  EEPROM.get(25, difficulty);


}


void updateEEPROM(){
  EEPROM.put(0, M_BRIGHT); //takes up 2 bytes
  EEPROM.put(2, LCD_BRIGHT); //takes up 2 bytes
  EEPROM.put(4, sounds); //takes up 2 bytes

  EEPROM.put(6, highscore[0].score); //takes up 2 bytes
  EEPROM.put(8, highscore[1].score); //takes up 2 bytes
  EEPROM.put(10, highscore[2].score); //takes up 2 bytes

  for(int i = 0; i <= 2; i++){
    EEPROM.put(12 + i, highscore[0].name[i]);
    EEPROM.put(15 + i, highscore[1].name[i]);
    EEPROM.put(18 + i, highscore[2].name[i]);
    EEPROM.put(21 + i, currentName[i]);
  }
  EEPROM.put(25, difficulty);

}

unsigned long lastNextBlink = 0;
const int nextBlinkTime = 500;
bool nextBlinkOn = 1;

int menuIndex;
int menuSelected;
unsigned long lastMenuMove;

void initialScreen(){
  //blink next
  if(millis() > lastNextBlink + nextBlinkTime){
    nextBlinkOn = !nextBlinkOn;
    lcd.setCursor(LCD_WIDTH - 1, 1);
    if(nextBlinkOn){
    lcd.write(nextChar);
    }else{
      lcd.write(" ");
    }
    lastNextBlink = millis();
  }

  if(buttonPressed){
        state = 1;
        menuIndex = 0;
        menuSelected = 0;
        lcd.clear();
        buttonPressed = 0;
        matrixUpdate = 1;
      }
}





unsigned long lastScrollTime = 0;

void displayMenu(){
  lcd.setCursor(1,0);
  lcd.print(mainMenuOptions[menuIndex]);
  lcd.setCursor(1,1);
  lcd.print(mainMenuOptions[menuIndex + 1]);

  //selections

  if(menuIndex == menuSelected){
    lcd.setCursor(0,0);
    lcd.write(selectedChar);
  }else{
    lcd.setCursor(0,1);
    lcd.write(selectedChar);
  }
}
void mainMenuLogic(){
  int indexCopy = menuSelected;
  if(yValue && millis() >= lastMenuMove + MOVE_TIME ){
      if(yValue == 1){
      menuSelected = max(menuSelected - 1, 0);
      menuIndex = min(menuSelected, max(menuIndex - 1, 0));
      
    }else{
      menuSelected = min(menuSelected + 1, menuOptions - 1);
      menuIndex = min(menuIndex + 1, menuOptions - 2);
      // lcd.clear();
    }
    if(indexCopy != menuSelected){
      lcd.clear();
    }
    lastMenuMove = millis();
  }
  
  if(buttonPressed){
    state = menuSelected + 2;
    update = true;
    lcd.clear();
    buttonPressed = 0;
    matrixUpdate = 1;
  }
}

bool scrollDirection = true;
short scrollPosition;
int aboutIndex = 0;
void about(){
  lcd.setCursor(0,0);
  lcd.print(aboutLinesArray[aboutIndex]);
  

  int indexCopy = aboutIndex;
  if(yValue && millis() >= lastMenuMove + MOVE_TIME ){
      if(yValue == 1){
      aboutIndex = max(aboutIndex - 1, 0);
      
    }else{
      aboutIndex = min(aboutIndex + 1, aboutLines - 2);
    }
    if(indexCopy != aboutIndex){
      lcd.clear();
    }
    lastMenuMove = millis();
  }


  if(aboutIndex == 2){
    


    if(millis() > lastScrollTime + scrollTime){
      if(scrollDirection){
        scrollPosition++;
      }else{
        scrollPosition--;
      }

      String aux = "https://github.com/";
      if (scrollPosition == aux.length()) {
        scrollDirection = false;
      }
      if (scrollPosition == 0) {
        scrollDirection = true;
      }
      lcd.setCursor(0,1);
      lcd.print(aboutLinesArray[aboutIndex + 1].substring(scrollPosition));
      lcd.print(" ");

      lastScrollTime = millis();
    }
    //  Serial.print(scrollPosition);
      
    // delay(100);
  }else{
    scrollDirection = true; // true for left, false for right
    // Define the current scroll position
    scrollPosition = 0;

    lcd.setCursor(0,1);
    lcd.print(aboutLinesArray[aboutIndex + 1]);
  }


  
  if(buttonPressed){
    state = 1;
    matrixUpdate = 1;
    lcd.clear();
    buttonPressed = 0;
  }



}

int howToIndex = 0;
void howToPlay(){
  lcd.setCursor(0,0);
  lcd.print(howToPlayArray[howToIndex]);
  lcd.setCursor(0,1);
  lcd.print(howToPlayArray[howToIndex + 1]);

  int indexCopy = howToIndex;
  if(yValue && millis() >= lastMenuMove + MOVE_TIME ){
      if(yValue == 1){
      howToIndex = max(howToIndex - 1, 0);
      
    }else{
      howToIndex = min(howToIndex + 1, howToPlayLines - 2);
    }
    if(indexCopy != howToIndex){
      lcd.clear();
    }
    lastMenuMove = millis();
  }
    
  


  
  if(buttonPressed){
    state = 1;
    matrixUpdate = 1;
    lcd.clear();
    buttonPressed = 0;
  }



}
int settingsIndex = 0;
int settingsSelected = 0;
short inSetting = -1;

int LEDvalue;
int LCDvalue;
int soundValue;
int difficultyValue;
int auxIndex;
void displaySettings(){

  switch(inSetting){
      case -1:
        lcd.setCursor(1,0);
        lcd.print(settingsOptionsArray[settingsIndex]);
        lcd.setCursor(1, 1);
        lcd.print(settingsOptionsArray[settingsIndex + 1]);

        if(settingsIndex == settingsSelected){
          lcd.setCursor(0,0);
          lcd.write(selectedChar);
        }else{
          lcd.setCursor(0,1);
          lcd.write(selectedChar);
        }
        break;
      case 0: //setname
          setNameDisplay();
        break;
      case 1: //led brightness
        
        testMatrix(cupMatrix);
        
        lcd.setCursor(0,0);
        lcd.print("Current:");
        lcd.print(M_BRIGHT);
        lcd.write(lineChar);
        lcd.write(nextChar);
        lcd.print(LEDvalue);

        if(auxIndex == 0){
          lcd.setCursor(LCD_WIDTH - 1 , 0);
          lcd.print("X");
        }

        lcd.setCursor(0,1);
        for(int i = 0; i <= LEDvalue; i++){
          lcd.write(rectangleChar);
        }
        for(int i = LEDvalue + 1; i <= LCD_WIDTH; i++){
          lcd.write(lineChar);
        }
        break;
      case 2: //lcd brightness
        
        
        lcd.setCursor(0,0);
        lcd.print("Current:");
        lcd.print(map(LCD_BRIGHT,0,255,0,15));
        lcd.write(lineChar);
        lcd.write(nextChar);
        lcd.print(LCDvalue);

        if(auxIndex == 0){
          lcd.setCursor(LCD_WIDTH - 1 , 0);
          lcd.print("X");
        }

        lcd.setCursor(0,1);
        for(int i = 0; i <= LCDvalue; i++){
          lcd.write(rectangleChar);
        }
        for(int i = LCDvalue + 1; i <= LCD_WIDTH; i++){
          lcd.write(lineChar);
        }

        break;
      case 3://sounds
        lcd.setCursor(0,0);
        lcd.print("Buzzer: ");
        lcd.print((sounds % 2 == 0)? "OFF" : "ON");
        if(auxIndex == 0){
          lcd.setCursor(LCD_WIDTH - 1 , 0);
          lcd.print("X");
        }

        lcd.setCursor(0,1);
        lcd.print((soundValue % 2 == 0)? "OFF" : "ON");
        break;
      case 4://highscore
        lcd.setCursor(0,0);
        lcd.print(F("Highest: "));
        lcd.print(highscore[0].score);
        if(auxIndex == 0){
          lcd.setCursor(LCD_WIDTH - 1 , 0);
          lcd.print("X");
        }
        lcd.setCursor(0,1);
        lcd.print(F("Reset highscore"));

        break;
        break;
    }

}

void settingsLogic(){
  // Serial.println(inSetting);
  int indexCopy;
  
  switch(inSetting){
      case -1:
        //select an option
        indexCopy = settingsSelected;
        if(yValue && millis() >= lastMenuMove + MOVE_TIME ){
            if(yValue == 1){
            settingsSelected = max(settingsSelected - 1, 0);
            settingsIndex = min(settingsSelected, max(settingsIndex - 1, 0));
            
          }else{
            settingsSelected = min(settingsSelected + 1, settingsLines - 1);
            settingsIndex = min(settingsIndex + 1, settingsLines - 2);
            // lcd.clear();
          }
          if(indexCopy != settingsSelected){
            lcd.clear();
            update = true;
          }
          lastMenuMove = millis();
        }
        if(buttonPressed){
          if(settingsSelected != settingsLines -1){
            inSetting = settingsSelected;
            auxIndex = 0;
            LEDvalue = M_BRIGHT;
            LCDvalue = map(LCD_BRIGHT,0,255,0,15);
            soundValue = sounds;
            
          }else{
            settingsSelected = 0;
            settingsIndex = 0;
            state = 1;
            
          }
          
          lcd.clear();
          update = true;
          buttonPressed = false;
          matrixUpdate = 1;
        }
        break;

      case 1:
        // Serial.print(22);
        if(auxIndex == 1 && xValue && millis() >= lastMenuMove + MOVE_TIME ){
          if(xValue == 1){
            LEDvalue = min(LEDvalue + 1, 15);
          }else{
            LEDvalue = max(LEDvalue - 1, 0);
          }
          
          lc.setIntensity(0, LEDvalue);
          update = true;
          lastMenuMove = millis();
        }

        if(yValue == 1 && auxIndex == 1){
          auxIndex = 0;
          update = true;
        }

        if(yValue == -1 && auxIndex == 0){
          auxIndex = 1;
          update = true;
        }

        if(buttonPressed){
          if(auxIndex == 1){
            M_BRIGHT = LEDvalue;  
            updateEEPROM();
          }else{
            inSetting = -1;
            lc.setIntensity(0, M_BRIGHT);
            matrixUpdate = 1;
          }
          update = true;
          buttonPressed = false;
        }

        break;
      case 2:
        //LCD Brigthness
        if(matrixUpdate){
          testMatrix(dumbellMatrix);
          matrixUpdate = 0;
        }

       
        if(auxIndex == 1 && xValue && millis() >= lastMenuMove + MOVE_TIME ){
          if(xValue == 1){
            LCDvalue = min(LCDvalue + 1, 15);
          }else{
            LCDvalue = max(LCDvalue - 1, 0);
          }
          
          analogWrite(LCD_Backlight,map(LCDvalue,0,15,0,255));
          update = true;
          lastMenuMove = millis();
        }

        if(yValue == 1 && auxIndex == 1){
          auxIndex = 0;
          update = true;
        }

        if(yValue == -1 && auxIndex == 0){
          auxIndex = 1;
          update = true;
        }

        if(buttonPressed){
          if(auxIndex == 1){
            LCD_BRIGHT = map(LCDvalue,0,15,0,255);  
            updateEEPROM();
          }else{
            inSetting = -1;
            analogWrite(LCD_Backlight,LCD_BRIGHT);
            matrixUpdate = 1;
          }
          
          update = true;
          buttonPressed = false;
        }

          break;

      case 3:
        //sounds
       
        if(auxIndex == 1 && xValue && millis() >= lastMenuMove + MOVE_TIME ){
          if(xValue == 1){
            soundValue = (soundValue + 1) % 2;
          }else{
            soundValue = (soundValue + 1) % 2;
          }
          
          update = true;
          lastMenuMove = millis();
        }

        if(yValue == 1 && auxIndex == 1){
          auxIndex = 0;
          update = true;
        }

        if(yValue == -1 && auxIndex == 0){
          auxIndex = 1;
          update = true;
        }

        if(buttonPressed){
          if(auxIndex == 1){
            sounds = soundValue; 
            updateEEPROM();
          }else{
            inSetting = -1;
            matrixUpdate = 1;
          }
          
          update = true;
          buttonPressed = false;
        }
        break;
      case 4://highscore;
        if(yValue == 1 && auxIndex == 1){
          auxIndex = 0;
          update = true;
        }

        if(yValue == -1 && auxIndex == 0){
          auxIndex = 1;
          update = true;
        }

        
        if(buttonPressed){
          if(auxIndex == 1){
            highscore[0].score = 0;
            highscore[1].score = 0;
            highscore[2].score = 0;
            highscore[0].name[0] = ' ';
            highscore[0].name[1] = ' ';
            highscore[0].name[2] = ' ';
            highscore[1].name[0] = ' ';
            highscore[1].name[1] = ' ';
            highscore[1].name[2] = ' ';
            highscore[2].name[0] = ' ';
            highscore[2].name[1] = ' ';
            highscore[2].name[2] = ' ';
            updateEEPROM();
          }else{
            inSetting = -1;
            matrixUpdate = 1;
          }
          
          update = true;
          buttonPressed = false;
        }

        break;
      case 0: // Set name
        if(matrixUpdate){
          testMatrix(nameMatrix);
          matrixUpdate = 0;
        }

        setNameLogic();
        break;
      default:
        break;
    }

}

void gameDisplay(){
  if(update){
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Keep going!");
      lcd.setCursor(0, 1);
      lcd.print("Score: ");
      lcd.print(playerScore);
    if(endGame){
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print(F("You died!"));
      lcd.setCursor(0, 1);
      lcd.print(F("Your score: "));
      lcd.print(playerScore);
    }
  }

  update = false;
}

byte selectedLetter = 0;
void setNameDisplay(){
  lcd.setCursor(0,0);
  lcd.print(F("Name: "));
  if(auxIndex == 0){
    lcd.setCursor(LCD_WIDTH - 1 , 0);
    lcd.print("X");
  }
  lcd.setCursor(7 + selectedLetter,0);
  lcd.print("v");

  lcd.setCursor(0,1);
  lcd.print(F("Set: "));

  lcd.setCursor(7,1);
  lcd.print(currentName[0]);
  lcd.print(currentName[1]);
  lcd.print(currentName[2]);
  
  
}

void setNameLogic(){
  if(xValue && millis() >= lastMenuMove + MOVE_TIME ){
          if(xValue == 1){
            selectedLetter = min(selectedLetter + 1, 2);
          }else{
            selectedLetter = max(selectedLetter - 1, 0);
          }
          
          update = true;
          lastMenuMove = millis();
  }

  if(yValue && millis() >= lastMenuMove + MOVE_TIME ){
          currentName[selectedLetter] += yValue;
          
          if(currentName[selectedLetter] > 'Z'){
            currentName[selectedLetter] = 'A';
          }

          if(currentName[selectedLetter] < 'A'){
            currentName[selectedLetter] = 'Z';
          }

          
          update = true;
          lastMenuMove = millis();
  }

  if(buttonPressed){
    buttonPressed = 0;
    update = true;
    updateEEPROM();
    inSetting = -1;
    matrixUpdate = 1;
  }
}

void setup() {
  Serial.begin(9600); // Start serial communication for debugging
  pinMode(clickPin, INPUT_PULLUP);
  pinMode(LCD_Backlight, OUTPUT);
 

  
  if( RESET ){
    M_BRIGHT = 15; //0 ->15
    LCD_BRIGHT = 255;
    sounds = 1;
    highscore[0].score = 0;
    highscore[1].score = 0;
    highscore[2].score = 0;
    highscore[0].name[0] = ' ';
    highscore[0].name[1] = ' ';
    highscore[0].name[2] = ' ';
    highscore[1].name[0] = ' ';
    highscore[1].name[1] = ' ';
    highscore[1].name[2] = ' ';
    highscore[2].name[0] = ' ';
    highscore[2].name[1] = ' ';
    highscore[2].name[2] = ' ';
    currentName[0] = 'A';
    currentName[1] = 'A';
    currentName[2] = 'A';
    difficulty = 5;
  
    updateEEPROM();
  }else{
    readEEPROM();
  }
  
  difficultyValue = difficulty;
  highscore[0].name[3] = '\0';
  highscore[1].name[3] = '\0';
  highscore[2].name[3] = '\0';

  // analogWrite(LCD_Backlight,126);
  // Initialize the LED matrix
  lc.shutdown(0, false); // Disable power saving, turn on the display
  lc.setIntensity(0, M_BRIGHT); // Set the brightness level
  lc.clearDisplay(0); // Clear the display initially

  initLCD();
  state = 0;
  


}

// Main loop, runs continuously
void loop() {
  // Serial.println(buttonPressed);
  buttonDebounce();
  readJoystick();

  switch (state){
    case 0:
      initialScreen();
      break;
    case 1:
      if(matrixUpdate){
        testMatrix(menuMatrix);
        matrixUpdate = 0;
      }

      //main menu
      displayMenu();
      mainMenuLogic();
      break;
    case 2:
      //start game;
      if(gameOn == 0){
        gameBegin();
        gameOn = 1;

        update = 1;
      }
      if(endGame == 0){
        gameLogic();
        gameDisplay();
      }else{
        

        //blink player

        if(lastPlayerBlink + P_BLINK_RATE <= millis()){
          playerState = !playerState;
          lastPlayerBlink = millis();
          // Serial.println(23);
        }

        if(isCrouching == 0)
          lc.setLed(0, playerY, playerX - matrixPos, playerState);
        lc.setLed(0, playerY + 1, playerX - matrixPos, playerState);

        if(buttonPressed){
          gameOn = 0;
          endGame = 0;
          state = 1;
          matrixUpdate = 1;
          buttonPressed = 0;
          lcd.clear();

          //handle high score

          updateHighscore();

        }
      }


      break;
    case 3:
      if(matrixUpdate){
        testMatrix(settingsMatrix);
        matrixUpdate = 0;
      }


      //settings
      if(update){
        lcd.clear();
        displaySettings();
        update = false;
      }
      settingsLogic();
      break;
    case 4:
      about();
      //about
      break;
    case 5:
      //how to play
      if(matrixUpdate){
        testMatrix(howToMatrix);
        matrixUpdate = 0;
      }

      howToPlay();
      break;
    case 6: //leaderboard

      if(matrixUpdate){
        testMatrix(cupMatrix);
        matrixUpdate = 0;
      }
      if(update){
        leaderboardDisplay();
      }
      leaderboardLogic();
      break;
    case 7: //difficulty
      if(matrixUpdate){
        testMatrix(dumbellMatrix);
        matrixUpdate = 0;
      }

      if(update){
        difficultyDisplay();
        update = false;
      }
      difficultyLogic();
      break;
  
  }
  

}


void difficultyDisplay(){
  lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("Current:");
        lcd.print(difficulty);
        lcd.write(lineChar);
        lcd.write(nextChar);
        lcd.print(difficultyValue);

        if(auxIndex == 0){
          lcd.setCursor(LCD_WIDTH - 1 , 0);
          lcd.print("X");
        }

        lcd.setCursor(0,1);
        for(int i = 0; i <= difficultyValue; i++){
          lcd.write(rectangleChar);
        }
        for(int i = difficultyValue + 1; i <= 10; i++){
          lcd.write(lineChar);
        }
}

void difficultyLogic(){
        if(auxIndex == 1 && xValue && millis() >= lastMenuMove + MOVE_TIME ){
          if(xValue == 1){
            difficultyValue = min(difficultyValue + 1, 10);
          }else{
            difficultyValue = max(difficultyValue - 1, 0);
          }
          
          update = true;
          lastMenuMove = millis();
        }

        if(yValue == 1 && auxIndex == 1){
          auxIndex = 0;
          update = true;
        }

        if(yValue == -1 && auxIndex == 0){
          auxIndex = 1;
          update = true;
        }

        if(buttonPressed){
          if(auxIndex == 1){
            difficulty = difficultyValue;
            updateEEPROM();
          }else{
            state = 1;
          }
          update = true;
          lcd.clear();
          matrixUpdate = 1;
          buttonPressed = false;
        }
}

byte lbIndex = 0;
void leaderboardDisplay(){
  lcd.setCursor(0,0);
  if(lbIndex == 0){
    lcd.print(F("Leaderboard: "));
  }else{
    lcd.print(highscore[lbIndex - 1].name);
    lcd.print(" ");
    lcd.print(highscore[lbIndex - 1].score);

    Serial.println(highscore[lbIndex - 1].score)
  }

  lcd.setCursor(0,1);
  lcd.print(highscore[lbIndex ].name);
  lcd.print(" ");
  lcd.print(highscore[lbIndex].score);

}

void leaderboardLogic(){
  int indexCopy = lbIndex;
  if(yValue && millis() >= lastMenuMove + MOVE_TIME ){
      if(yValue == 1){
      lbIndex = max(lbIndex - 1, 0);
      
    }else{
      lbIndex = min(lbIndex + 1, 2);
    }
    if(indexCopy != lbIndex){
      lcd.clear();
      update = 1;
    }
    lastMenuMove = millis();
  }


  if(buttonPressed){
    state = 1;
    matrixUpdate = 1;
    lcd.clear();
    update = 1;
    buttonPressed = 0;
    lbIndex = 0;
  }


}

void testMatrix(bool M[M_HEIGHT][M_LENGTH]) {
  for (int row = 0; row < M_HEIGHT; row++) {
    for (int col = 0; col < M_LENGTH; col++) {
      //only odd values should be diplayed
      lc.setLed(0, row, col, M[row][col]); // Update each LED state
    }
  }
}




